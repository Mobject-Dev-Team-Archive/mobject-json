<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDomParser" Id="{9ee703c7-5146-4108-a56a-2e66870e39e2}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK JsonDomParser EXTENDS FB_JsonDynDomParser
VAR
	currentlyParsingType : (NOTHING, DOT_NOTATION_PROPERTY, BRACKET_NOTATION_PROPERTY_OR_ARRAY, BRACKET_NOTATION_PROPERTY_ELEMENT, BRACKET_NOTATION_ARRAY_ELEMENT);
	readWriteDataType : FB_JsonReadWriteDataType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{57ebaeff-72b8-48f1-a518-b5e3240b9107}" />
    <Method Name="ConvertPathToJsonPosition" Id="{91121397-dd47-4729-b855-0f647368f2eb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ConvertPathToJsonPosition : SJsonValue
VAR_INPUT
	Path : REFERENCE TO STRING;
	Document : SJsonValue;
END_VAR
VAR
//	pRootElement : POINTER TO JsonPathElement_Root;
//	pPropertyElement : POINTER TO JsonPathElement_Property; 
//	pArrayElement : POINTER TO JsonPathElement_ArraySingleSelector; 
	
	currentJsonPosition : SJsonValue;
	currentCharacterPositionInPath : UDINT;

	currentElementStart : UDINT;
	currentElementEnd : UDINT;
	currentElementLength : UDINT;
	elementText : T_MAXSTRING;
	endOfRepeat : BOOL;
END_VAR
VAR CONSTANT
	PERIOD : BYTE := 16#2E; // .
	DOLLAR_SIGN : BYTE := 16#24; // $
	SINGLE_QUOTE : BYTE := 16#27; // '
	LEFT_SQUARE_BRACKET : BYTE := 16#5B; // [
	RIGHT_SQUARE_BRACKET : BYTE := 16#5D; // ]
	NULL : BYTE := 0; // null
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Path[0] = NULL THEN
	RETURN;
END_IF

currentCharacterPositionInPath := 0;
currentlyParsingType := NOTHING;
currentJsonPosition := Document;

REPEAT 
	
	IF currentJsonPosition = 0 THEN
		RETURN;
	END_IF
	
	IF Path[currentCharacterPositionInPath] = NULL THEN
		 endOfRepeat := TRUE;
	END_IF
		
	CASE currentlyParsingType OF
		
		NOTHING: 
		
			// at this point we are not currently "parsing" a known type from the string, therfore the next character should 
			// decide what type is next. 
		
			IF Path[currentCharacterPositionInPath] = DOLLAR_SIGN THEN
				
				// i.e. the following string $.myValue would indicate that we are here.
				//                           ^                                         
				// as such, we do not need to take any action.  We already create a root element at the start, so this is an 
				// optional character which they do not need to supply. 				
				
			ELSIF Path[currentCharacterPositionInPath] = PERIOD THEN
				
				// i.e. the following string $.myValue would indicate that we are here.
				//                            ^                                        
				// as such, we do not need to take any action.  
				
			ELSIF Path[currentCharacterPositionInPath] = LEFT_SQUARE_BRACKET THEN
				
				// i.e. the following string $.myValue[1].['myProperty'] would indicate that we could be at the start of one of two types
				//                                    ^   ^                                      
				// as such, we mark that we could be either a property or array and continue				
				currentlyParsingType := BRACKET_NOTATION_PROPERTY_OR_ARRAY;				
				
			ELSIF Path[currentCharacterPositionInPath] = RIGHT_SQUARE_BRACKET THEN
				
				// This would indicate a failed parse as this should not happen.
				
			ELSIF Path[currentCharacterPositionInPath] = SINGLE_QUOTE THEN
				
				// This would indicate a failed parse as this should not happen.
				
			ELSE
				
				// i.e. the following string $.myValue[1].['myProperty'] would indicate that we could be at the start of a property
				//                             ^                      
				currentlyParsingType := DOT_NOTATION_PROPERTY;
				currentElementStart := currentCharacterPositionInPath;	
		
			END_IF
			
		DOT_NOTATION_PROPERTY:
		
			IF Path[currentCharacterPositionInPath] = PERIOD OR Path[currentCharacterPositionInPath] = LEFT_SQUARE_BRACKET OR Path[currentCharacterPositionInPath] = NULL THEN
				
				currentElementEnd := currentCharacterPositionInPath - 1;
				
				currentElementLength := 1 + currentElementEnd - currentElementStart;
				memset(ADR(elementText),0,SIZEOF(elementText));
				memcpy(ADR(elementText),ADR(Path[currentElementStart]),currentElementLength);
		
				currentJsonPosition := FindMember(currentJsonPosition,elementText);	
				currentlyParsingType := NOTHING;
				CONTINUE;
				
			END_IF
			
		BRACKET_NOTATION_PROPERTY_OR_ARRAY:
		
			IF Path[currentCharacterPositionInPath] = SINGLE_QUOTE THEN
				currentlyParsingType := BRACKET_NOTATION_PROPERTY_ELEMENT;
				currentElementStart := currentCharacterPositionInPath + 1;			
			ELSE
				currentlyParsingType := BRACKET_NOTATION_ARRAY_ELEMENT;
				currentElementStart := currentCharacterPositionInPath;			
			END_IF
			
		BRACKET_NOTATION_PROPERTY_ELEMENT:
		
			IF Path[currentCharacterPositionInPath] = SINGLE_QUOTE THEN
				
				currentElementEnd := currentCharacterPositionInPath - 1;

				currentElementLength := 1 + currentElementEnd - currentElementStart;
				memset(ADR(elementText),0,SIZEOF(elementText));
				memcpy(ADR(elementText),ADR(Path[currentElementStart]),currentElementLength);
				
				currentJsonPosition := FindMember(currentJsonPosition,elementText);				
				currentlyParsingType := NOTHING;
						
			END_IF
			
		BRACKET_NOTATION_ARRAY_ELEMENT:
		
			IF Path[currentCharacterPositionInPath] = RIGHT_SQUARE_BRACKET THEN
				
				currentElementEnd := currentCharacterPositionInPath - 1;
				
				currentElementLength := 1 + currentElementEnd - currentElementStart;
				memset(ADR(elementText),0,SIZEOF(elementText));
				memcpy(ADR(elementText),ADR(Path[currentElementStart]),currentElementLength);
				
				currentJsonPosition := GetArrayValueByIdx(currentJsonPosition, STRING_TO_UDINT(elementText));		
				currentlyParsingType := NOTHING;
						
			END_IF
			

	END_CASE
	
	currentCharacterPositionInPath := currentCharacterPositionInPath + 1;
	
UNTIL endOfRepeat 
END_REPEAT
	
ConvertPathToJsonPosition := currentJsonPosition;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryRead" Id="{234502bb-5c8e-4971-9b37-2729581facef}">
      <Declaration><![CDATA[METHOD PUBLIC TryRead : BOOL
VAR_INPUT
	Path : T_MaxString;
	Destination : ANY;
END_VAR
VAR
	root : SJsonValue;
	jsonValue : SJsonValue;
	_BOOL : BOOL;
	_DINT : DINT;
	_LINT : LINT;
	_UDINT : UDINT;
	_ULINT : ULINT;
	_LREAL : LREAL;
	_STRING : POINTER TO STRING(1);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[root := GetDocumentRoot();
jsonValue := ConvertPathToJsonPosition(Path, root);

IF jsonValue = 0 THEN
	RETURN;
END_IF

IF IsBool(jsonValue) THEN
	_BOOL := GetBool(jsonValue);
	TryRead := TryConvert_BOOL_TO_DESTINATION(_BOOL,Destination);
	RETURN;
END_IF

IF IsInt(jsonValue) THEN
	_DINT := GetInt(jsonValue);
	TryRead := TryConvert_DINT_TO_DESTINATION(_DINT,Destination);
	RETURN;
END_IF

IF IsInt64(jsonValue) THEN
	_LINT := GetInt64(jsonValue);
	TryRead := TryConvert_LINT_TO_DESTINATION(_LINT,Destination);
	RETURN;
END_IF

IF IsUInt(jsonValue) THEN
	_UDINT := GetUInt(jsonValue);
	TryRead := TryConvert_UDINT_TO_DESTINATION(_UDINT,Destination);
	RETURN;
END_IF

IF IsUInt64(jsonValue) THEN
	_ULINT := GetUInt64(jsonValue);
	TryRead := TryConvert_ULINT_TO_DESTINATION(_ULINT,Destination);
	RETURN;
END_IF

IF IsDouble(jsonValue) THEN
	_LREAL := GetDouble(jsonValue);
	TryRead := TryConvert_LREAL_TO_DESTINATION(_LREAL,Destination);
	RETURN;
END_IF

IF IsString(jsonValue) AND Destination.TypeClass = __SYSTEM.TYPE_CLASS.TYPE_STRING THEN
	_STRING := Destination.pValue;
	IF (CopyString(jsonValue,_STRING^,Destination.diSize) > 0) THEN;
		TryRead := TRUE;
		RETURN;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>