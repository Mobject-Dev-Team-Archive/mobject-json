<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDeserializer" Id="{a90a43d9-ea62-48ae-9b56-2bc4217891a9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK JsonDeserializer EXTENDS Disposable IMPLEMENTS I_JsonDeserializer
VAR
	jsonParser : JsonDomParser;
	root : SJsonValue;
	garbageCollector : DeserializerGarbageCollector;
	nullNode : JsonDeserializerNullNode(THIS^);
	rootNode : I_Deserializer := nullNode;
	eventEmitter : EventEmitter;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{bf822394-22a2-42d6-8812-78eace02343d}" />
    <Folder Name="Protected" Id="{01c55fae-a423-471f-adbb-267168f4fce0}" />
    <Method Name="Clone" Id="{f09ba639-152e-42ab-83f4-0db39532c374}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Deserializer
VAR
	pClone : POINTER TO JsonDeserializer;
	jsonSize : UDINT;
	pJsonString : POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(JsonDeserializer);
Clone := pClone^;

jsonSize := jsonParser.GetDocumentLength();

IF jsonSize = 0 THEN
	// no further cloning to do. 
	RETURN;
END_IF

pJsonString := __NEW(BYTE, jsonSize);

IF jsonParser.CopyDocument(pJsonString^, jsonSize) = 0 THEN
	__DELETE(pJsonString);
	RETURN;
END_IF

pClone^.TryLoad(pJsonString^);
__DELETE(pJsonString);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateDeserializer" Id="{6e178c51-cb69-40a4-96bf-b38252df7bdc}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateDeserializer : I_Deserializer
VAR_INPUT
	DeserializerRoot : SJsonValue;
END_VAR
VAR 
	pNode : POINTER TO JsonDeserializerNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(JsonDeserializerNode(
	ParentJsonDeserializer := THIS^,
	ParentJsonDomParser := jsonParser, 
	NodeRoot := DeserializerRoot, 
	ParentGarbageCollector := garbageCollector, 
	ParentNullDeserializer := nullNode)
);

CreateDeserializer := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitChangedEvent" Id="{3292f357-a850-4b07-84b8-6ac1bcad29c4}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PRIVATE EmitChangedEvent
VAR
	pJsonDeserializerChangedEvent : POINTER TO JsonDeserializerChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pJsonDeserializerChangedEvent := __NEW(JsonDeserializerChangedEvent(Target := THIS^));
eventEmitter.Emit('OnChanged', pJsonDeserializerChangedEvent^);
pJsonDeserializerChangedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitDisposedEvent" Id="{d5c30bcb-5159-4f97-8dde-50d1098331ac}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PRIVATE EmitDisposedEvent
VAR
	pJsonDeserializerDisposedEvent : POINTER TO JsonDeserializerDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pJsonDeserializerDisposedEvent := __NEW(JsonDeserializerDisposedEvent(Target := THIS^));
eventEmitter.Emit('OnDisposed', pJsonDeserializerDisposedEvent^);
pJsonDeserializerDisposedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{d9f286cf-0a82-45b5-9661-1cb5706a832d}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

Reset();
EmitDisposedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArray" Id="{a8b524f2-5f76-4824-97b5-f83f0e1611cd}">
      <Declaration><![CDATA[METHOD GetArray : I_Deserializer
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetArray := rootNode.GetArray();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArrayEnumerator" Id="{296bee65-3702-4f89-b62c-79e4d6cff36a}">
      <Declaration><![CDATA[METHOD GetArrayEnumerator : I_DeserializerArrayForwardEnumerator
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetArrayEnumerator := rootNode.GetArrayEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetElementByIndex" Id="{adfb94ab-88ff-476c-a549-f0880b6a7e45}">
      <Declaration><![CDATA[METHOD GetElementByIndex : I_Deserializer
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetElementByIndex := rootNode.GetElementByIndex(Index);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyArray" Id="{64ed3b17-47ab-402e-a2fe-0b75f40cb73a}">
      <Declaration><![CDATA[METHOD GetKeyArray : I_Deserializer
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetKeyArray := rootNode.GetKeyArray(Key);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyObject" Id="{0f1075b2-7f5b-4f71-8323-87a91a30b569}">
      <Declaration><![CDATA[METHOD GetKeyObject : I_Deserializer
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetKeyObject := rootNode.GetKeyObject(Key);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetObject" Id="{41c747d7-9394-44e2-9d96-0f8c59e3b2b1}">
      <Declaration><![CDATA[METHOD GetObject : I_Deserializer
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetObject := rootNode.GetObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetObjectEnumerator" Id="{4e8516b1-abeb-410a-ac04-583c396c626e}">
      <Declaration><![CDATA[METHOD GetObjectEnumerator : I_DeserializerObjectForwardEnumerator
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetObjectEnumerator := rootNode.GetObjectEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{95eb9567-cd9f-4891-914f-5f286298bc6f}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{c2492a02-8428-4e20-b3a6-aace55b5e0c8}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{7a0112ed-3061-4b02-a40e-eb2b9c06830c}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{ff410b24-6bd3-4b0b-b181-8baf610127fb}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[jsonParser.NewDocument();
garbageCollector.Execute();
root := 0;
rootNode := nullNode;
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetBase64" Id="{fe295ea1-6385-4c90-8c1e-0130d0abea78}">
      <Declaration><![CDATA[METHOD TryGetBase64 : BOOL
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetBase64 := rootNode.TryGetBase64(pBytes, nBytes);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetBool" Id="{6ec60297-fc78-4e42-8c9b-b797b172a63d}">
      <Declaration><![CDATA[METHOD TryGetBool : BOOL
VAR_INPUT
	Destination : REFERENCE TO BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetBool := rootNode.TryGetBool(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetByte" Id="{7f56b251-eee0-4e1f-94af-df45fa90da48}">
      <Declaration><![CDATA[METHOD TryGetByte : BOOL
VAR_INPUT
	Destination : REFERENCE TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetByte := rootNode.TryGetByte(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDateTime" Id="{0eefca34-6e86-480c-bd80-cca9f9d6217f}">
      <Declaration><![CDATA[METHOD TryGetDateTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO DATE_AND_TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetDateTime := rootNode.TryGetDateTime(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDcTime" Id="{822c1511-2a5b-4b36-a7ac-0e7bb0382e3f}">
      <Declaration><![CDATA[METHOD TryGetDcTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO DCTIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetDcTime := rootNode.TryGetDcTime(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDint" Id="{72d1a2f6-6d1c-43bc-8260-7a62f2ef0180}">
      <Declaration><![CDATA[METHOD TryGetDint : BOOL
VAR_INPUT
	Destination : REFERENCE TO DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetDint := rootNode.TryGetDint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDword" Id="{92993be7-2fb3-49bb-aa8c-994491f8b23c}">
      <Declaration><![CDATA[METHOD TryGetDword : BOOL
VAR_INPUT
	Destination : REFERENCE TO DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetDword := rootNode.TryGetDword(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetFileTime" Id="{6f985b02-908a-4e9a-8047-f818f837fe22}">
      <Declaration><![CDATA[METHOD TryGetFileTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO FILETIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetFileTime := rootNode.TryGetFileTime(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetHexAsBytes" Id="{57725d6f-7769-44f1-b87a-65ec295b3672}">
      <Declaration><![CDATA[METHOD TryGetHexAsBytes : BOOL
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetHexAsBytes := rootNode.TryGetHexAsBytes(pBytes, nBytes);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetInt" Id="{2fdf166b-5700-40ee-b8b0-abadc2efc46c}">
      <Declaration><![CDATA[METHOD TryGetInt : BOOL
VAR_INPUT
	Destination : REFERENCE TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetInt := rootNode.TryGetInt(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyBase64" Id="{e2e97d9b-41bc-414a-9d61-b71ea3e26097}">
      <Declaration><![CDATA[METHOD TryGetKeyBase64 : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyBase64 := rootNode.TryGetKeyBase64(Key, pBytes, nBytes);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyBool" Id="{5f267a8c-ebc4-4c51-b0f0-4a95026c8a3f}">
      <Declaration><![CDATA[METHOD TryGetKeyBool : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyBool := rootNode.TryGetKeyBool(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyByte" Id="{1c43e54c-ee47-4d7b-bcae-5f660a8fcad5}">
      <Declaration><![CDATA[METHOD TryGetKeyByte : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyByte := rootNode.TryGetKeyByte(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDateTime" Id="{c22b8398-2c86-4d72-9120-e789b40c9718}">
      <Declaration><![CDATA[METHOD TryGetKeyDateTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DATE_AND_TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyDateTime := rootNode.TryGetKeyDateTime(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDcTime" Id="{38227bfb-4cf2-495f-acbb-91f5f470f11e}">
      <Declaration><![CDATA[METHOD TryGetKeyDcTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DCTIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyDcTime := rootNode.TryGetKeyDcTime(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDint" Id="{82fdf3a0-94c2-4a8e-923d-cf45ec507d72}">
      <Declaration><![CDATA[METHOD TryGetKeyDint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyDint := rootNode.TryGetKeyDint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDword" Id="{5a45d2b3-e2ba-457e-a3e4-d79c9082fa74}">
      <Declaration><![CDATA[METHOD TryGetKeyDword : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyDword := rootNode.TryGetKeyDword(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyFileTime" Id="{ce1ac8be-a887-4bce-96e2-9b3a4179a8cb}">
      <Declaration><![CDATA[METHOD TryGetKeyFileTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO FILETIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyFileTime := rootNode.TryGetKeyFileTime(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyHexAsBytes" Id="{6d3a64ed-e904-4405-97e8-629172119dae}">
      <Declaration><![CDATA[METHOD TryGetKeyHexAsBytes : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyHexAsBytes := rootNode.TryGetKeyHexAsBytes(Key, pBytes, nBytes);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyInt" Id="{9d78e31a-c0cd-4dc2-a6c9-cc7bb2a5aeb5}">
      <Declaration><![CDATA[METHOD TryGetKeyInt : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyInt := rootNode.TryGetKeyInt(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLint" Id="{d12995f5-5579-4299-9a40-19fd2107eff5}">
      <Declaration><![CDATA[METHOD TryGetKeyLint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyLint := rootNode.TryGetKeyLint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLreal" Id="{92c3eaf3-71df-4e2f-ba93-315676c41524}">
      <Declaration><![CDATA[METHOD TryGetKeyLreal : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyLreal := rootNode.TryGetKeyLreal(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLtime" Id="{f0eafc1e-bf4b-4ceb-bdeb-6ae313a3df89}">
      <Declaration><![CDATA[METHOD TryGetKeyLtime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LTIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyLtime := rootNode.TryGetKeyLtime(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLword" Id="{65ebf9c9-8746-4bf0-9897-02e88608bc54}">
      <Declaration><![CDATA[METHOD TryGetKeyLword : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyLword := rootNode.TryGetKeyLword(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyObject" Id="{62ed7c8c-f671-47eb-b767-f4d091a68ae9}">
      <Declaration><![CDATA[METHOD TryGetKeyObject : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Object : I_Deserializable;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyObject := rootNode.TryGetKeyObject(Key,Object);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyReal" Id="{ba9c869b-cf53-471e-bda6-414ea929fcfa}">
      <Declaration><![CDATA[METHOD TryGetKeyReal : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyReal := rootNode.TryGetKeyReal(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeySint" Id="{9c210d46-b2cf-4e87-b34c-9c31c974981c}">
      <Declaration><![CDATA[METHOD TryGetKeySint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeySint := rootNode.TryGetKeySint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyString" Id="{145e945a-6148-465d-8d1e-78bff0346911}">
      <Declaration><![CDATA[METHOD TryGetKeyString : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyString := rootNode.TryGetKeyString(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyTime" Id="{ac1c2336-2654-4ecb-9c0d-cdf530414a88}">
      <Declaration><![CDATA[METHOD TryGetKeyTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyTime := rootNode.TryGetKeyTime(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyTod" Id="{bde0ce6f-cd97-4fe6-9b33-f96250f01eed}">
      <Declaration><![CDATA[METHOD TryGetKeyTod : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyTod := rootNode.TryGetKeyTod(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUdint" Id="{3f71ab6a-2c21-48ba-bea8-ac9c531c6a2f}">
      <Declaration><![CDATA[METHOD TryGetKeyUdint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyUdint := rootNode.TryGetKeyUdint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUint" Id="{b09d8575-090d-49e4-a0ce-27fe71c91a45}">
      <Declaration><![CDATA[METHOD TryGetKeyUint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyUint := rootNode.TryGetKeyUint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUlint" Id="{499ee358-c7a9-4f43-9581-abd422c87ec8}">
      <Declaration><![CDATA[METHOD TryGetKeyUlint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyUlint := rootNode.TryGetKeyUlint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUsint" Id="{35f67b71-f2b8-4d86-9bb3-95ee1284ba30}">
      <Declaration><![CDATA[METHOD TryGetKeyUsint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO USINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyUsint := rootNode.TryGetKeyUsint(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyWord" Id="{7efab29f-f53c-471a-95c5-75e9be77a68f}">
      <Declaration><![CDATA[METHOD TryGetKeyWord : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO WORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetKeyWord := rootNode.TryGetKeyWord(Key, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLint" Id="{75731b5e-e042-400b-a3d1-9b9ba60506d8}">
      <Declaration><![CDATA[METHOD TryGetLint : BOOL
VAR_INPUT
	Destination : REFERENCE TO LINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetLint := rootNode.TryGetLint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLreal" Id="{7b380507-57f2-4a93-985b-86be64078e31}">
      <Declaration><![CDATA[METHOD TryGetLreal : BOOL
VAR_INPUT
	Destination : REFERENCE TO LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetLreal := rootNode.TryGetLreal(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLtime" Id="{efd7f5a3-8843-4642-bc86-b9940affcca4}">
      <Declaration><![CDATA[METHOD TryGetLtime : BOOL
VAR_INPUT
	Destination : REFERENCE TO LTIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetLtime := rootNode.TryGetLtime(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLword" Id="{0295afb4-f050-4895-9c0b-6b9cdfa8b1ee}">
      <Declaration><![CDATA[METHOD TryGetLword : BOOL
VAR_INPUT
	Destination : REFERENCE TO LWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetLword := rootNode.TryGetLword(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetObject" Id="{4a3bb941-939c-4dd6-bed5-5312803ff942}">
      <Declaration><![CDATA[METHOD TryGetObject : BOOL
VAR_INPUT
	Object : I_Deserializable;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetObject := rootNode.TryGetObject(Object);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetReal" Id="{6c3290d3-fec4-47f7-a5d0-1861de90ccaf}">
      <Declaration><![CDATA[METHOD TryGetReal : BOOL
VAR_INPUT
	Destination : REFERENCE TO REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetReal := rootNode.TryGetReal(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetSint" Id="{e84565ff-7164-409c-9f95-c7b2be3fbcff}">
      <Declaration><![CDATA[METHOD TryGetSint : BOOL
VAR_INPUT
	Destination : REFERENCE TO SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetSint := rootNode.TryGetSint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetString" Id="{44240e6f-9963-4706-910b-e5c87c3f8607}">
      <Declaration><![CDATA[METHOD TryGetString : BOOL
VAR_INPUT
	Destination : REFERENCE TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetString := rootNode.TryGetString(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTime" Id="{80d80d87-f037-436c-8f8f-7f8fec352f39}">
      <Declaration><![CDATA[METHOD TryGetTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetTime := rootNode.TryGetTime(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTod" Id="{9e042969-ff4a-4b34-89ea-b8144dd0d5ca}">
      <Declaration><![CDATA[METHOD TryGetTod : BOOL
VAR_INPUT
	Destination : REFERENCE TO TOD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetTod := rootNode.TryGetTod(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUdint" Id="{751bec7e-3a00-432c-b241-6a6fad2970fb}">
      <Declaration><![CDATA[METHOD TryGetUdint : BOOL
VAR_INPUT
	Destination : REFERENCE TO UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetUdint := rootNode.TryGetUdint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUint" Id="{972566ca-529a-4fb3-bb50-96a823c8709e}">
      <Declaration><![CDATA[METHOD TryGetUint : BOOL
VAR_INPUT
	Destination : REFERENCE TO UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetUint := rootNode.TryGetUint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUlint" Id="{3f4a2c33-9649-45c1-875c-327dc26bc3a5}">
      <Declaration><![CDATA[METHOD TryGetUlint : BOOL
VAR_INPUT
	Destination : REFERENCE TO ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetUlint := rootNode.TryGetUlint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUsint" Id="{17108ee2-2a2f-480d-a20a-5a3943e8a7ad}">
      <Declaration><![CDATA[METHOD TryGetUsint : BOOL
VAR_INPUT
	Destination : REFERENCE TO USINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetUsint := rootNode.TryGetUsint(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetWord" Id="{39e3134f-9f16-4677-84f1-71254c101d0e}">
      <Declaration><![CDATA[METHOD TryGetWord : BOOL
VAR_INPUT
	Destination : REFERENCE TO WORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetWord := rootNode.TryGetWord(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryLoad" Id="{f075a62d-029d-4d3a-a33f-32a6021b89c2}">
      <Declaration><![CDATA[METHOD PUBLIC TryLoad : BOOL
VAR_INPUT
	SerializedData : REFERENCE TO STRING;;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset();
EmitChangedEvent();

root := jsonParser.ParseDocument(SerializedData);
IF root = 0 THEN
	RETURN;
END_IF

rootNode := CreateDeserializer(root);
TryLoad := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>