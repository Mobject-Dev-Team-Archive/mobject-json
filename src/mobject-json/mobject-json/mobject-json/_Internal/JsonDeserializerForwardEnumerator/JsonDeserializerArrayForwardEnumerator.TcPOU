<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDeserializerArrayForwardEnumerator" Id="{b1356522-2356-47f0-8fc3-88d40e839155}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK JsonDeserializerArrayForwardEnumerator EXTENDS Disposable IMPLEMENTS I_DeserializerArrayForwardEnumerator, I_EventHandler
VAR
	parent : I_JsonDeserializer;
	jsonParser : REFERENCE TO JsonDomParser;
	root : SJsonValue;
	garbageCollector : I_DeserializerGarbageCollector;
	nullNode : I_Deserializer;
	moveNextCalled : BOOL := FALSE;
	invalid : BOOL := FALSE; 
	currentArrayPosition : SJsonValue;
	arrayBeginPosition : SJsonValue;
	arrayEndPosition : SJsonValue;
	currentDeserializer : I_Deserializer;
	_index : DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{ba00adcc-08d5-4221-8a6d-f1cc9ae85243}" />
    <Folder Name="Destructor" Id="{04ffa51c-112f-420e-8c0b-d25948a287aa}" />
    <Folder Name="Protected" Id="{cb40a326-a2e1-460e-8df1-cec37018da7d}" />
    <Method Name="CreateDeserializer" Id="{a60c6716-d6f3-47d0-ab46-82abb6819244}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateDeserializer : I_Deserializer
VAR_INPUT
	DeserializerRoot : SJsonValue;
END_VAR
VAR 
	pNode : POINTER TO JsonDeserializerNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(JsonDeserializerNode(
	ParentJsonDeserializer := parent,
	ParentJsonDomParser := jsonParser, 
	NodeRoot := DeserializerRoot, 
	ParentGarbageCollector := garbageCollector, 
	ParentNullDeserializer := nullNode
));

CreateDeserializer := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Current" Id="{76effae0-fca9-497e-9a06-a16fed46d2f7}">
      <Declaration><![CDATA[PROPERTY PUBLIC Current : I_Deserializer]]></Declaration>
      <Get Name="Get" Id="{525739e4-97e2-44a8-8a11-181bc8f1475b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT IsValid THEN
	Current := nullNode;
	RETURN;
END_IF

IF currentDeserializer = 0 THEN
	Current := nullNode;
	RETURN;
END_IF

Current := currentDeserializer;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{ddac9f14-3e19-411b-9efc-b7db5d108772}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

IF parent = 0 THEN
	RETURN;
END_IF

parent.OffEvent('OnChanged',THIS^);
parent.OffEvent('OnDisposed',THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{9785a5f6-7e4a-4ea0-9517-538d8da73e6a}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ParentJsonDeserializer : I_JsonDeserializer;
	ParentJsonDomParser : REFERENCE TO JsonDomParser;
	NodeRoot : SJsonValue;
	ParentGarbageCollector : I_DeserializerGarbageCollector;
	ParentNullDeserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.parent := ParentJsonDeserializer;
THIS^.jsonParser REF= ParentJsonDomParser;
THIS^.root := NodeRoot;
THIS^.garbageCollector := ParentGarbageCollector;
THIS^.nullNode := ParentNullDeserializer;

Initialize();

Parent.OnEvent('OnChanged',THIS^);
Parent.OnEvent('OnDisposed',THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleEvent" Id="{9b82c3a0-a8d9-4f44-aa61-0031448f4819}">
      <Declaration><![CDATA[METHOD PUBLIC HandleEvent
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	changedEvent : I_JsonDeserializerChangedEvent;
	disposedEvent : I_JsonDeserializerDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(Event, changedEvent) THEN
	invalid := TRUE;
ELSIF __QUERYINTERFACE(Event, disposedEvent) THEN
	parent := 0;
	Dispose();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Index" Id="{5760f693-3452-44a4-8bfc-b33dbdf396cf}">
      <Declaration><![CDATA[PROPERTY Index : DINT]]></Declaration>
      <Get Name="Get" Id="{02bfb3b9-101c-4c93-ae96-0e597618e7e9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Index := _index;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialize" Id="{ebcb0e63-842a-4d07-98bb-066bfc3fb500}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED Initialize
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT jsonParser.IsArray(root) THEN
	invalid := TRUE;
	RETURN;
END_IF

arrayBeginPosition := jsonParser.ArrayBegin(root);
arrayEndPosition := jsonParser.ArrayEnd(root);

IF arrayBeginPosition = 0 THEN
	invalid := TRUE;
	RETURN;
END_IF

IF arrayEndPosition = 0 THEN
	invalid := TRUE;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{aff8eea1-92fe-4c1a-ab72-6d68ef134bd6}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{d7fac01e-4fea-4838-8ffe-61ec719ff66c}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF invalid THEN
	RETURN;
END_IF

IF parent = 0 THEN
	RETURN;
END_IF

IsValid := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveNext" Id="{6be4d0d4-bc06-473d-8ec1-a047989792d6}">
      <Declaration><![CDATA[METHOD PUBLIC MoveNext : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF invalid THEN
    RETURN;
END_IF

// Handle the initial move
IF NOT moveNextCalled THEN
    moveNextCalled := TRUE;
    currentArrayPosition := arrayBeginPosition;
    UpdateCurrentDeserializer(currentArrayPosition);
	MoveNext := TRUE;
	_index := index + 1;
    RETURN;
END_IF

// Handle subsequent moves
IF currentArrayPosition <> arrayEndPosition THEN
	currentArrayPosition := jsonParser.NextArray(currentArrayPosition);
	UpdateCurrentDeserializer(currentArrayPosition);
	MoveNext := (currentArrayPosition <> arrayEndPosition);
	_index := index + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateCurrentDeserializer" Id="{00128fb3-0888-4680-baae-fe94bc38c29b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED UpdateCurrentDeserializer
VAR_INPUT
	Root : SJsonValue;
END_VAR
VAR
	newRoot : SJsonValue;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentDeserializer <> 0 THEN
	currentDeserializer.Dispose();
	currentDeserializer := 0;
END_IF

IF invalid THEN
	RETURN;
END_IF

newRoot := jsonParser.GetArrayValue(Root);

IF newRoot = 0 THEN
	RETURN;
END_IF

currentDeserializer := CreateDeserializer(newRoot);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>