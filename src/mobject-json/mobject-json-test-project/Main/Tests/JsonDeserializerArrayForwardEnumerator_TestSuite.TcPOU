<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDeserializerArrayForwardEnumerator_TestSuite" Id="{6559addd-bcd8-4bd9-82df-e00d7ad17ade}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK JsonDeserializerArrayForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestIsValidAtStart();
TestIsNotValidAfterParentDispose();
TestIsNotValidAfterParentReset();
TestMoveNextReturnsFalseAtTheEnd();
TestMoveNextReturnsTrueSingleItem();
TestMoveNextReturnsFalseWhenEmpty();
TestMoveNextReturnsTrueMultipleItems();
TestEnumerateThroughArrayOfInts();
TestEnumerateThroughArrayOfStrings();
TestEnumerateThroughArrayOfObjects();]]></ST>
    </Implementation>
    <Method Name="TestEnumerateThroughArrayOfInts" Id="{e3e6c381-eace-4200-9b7e-4694ac35a13c}">
      <Declaration><![CDATA[METHOD PRIVATE TestEnumerateThroughArrayOfInts
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '[1, 2, 3]';
	out1, out2, out3 : INT;
	expected1 : INT := 1;
	expected2 : INT := 2;
	expected3 : INT := 3;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestEnumerateThroughArrayOfInts');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

enumerator.MoveNext();
enumerator.Current.TryGetInt(out1);

enumerator.MoveNext();
enumerator.Current.TryGetInt(out2);

enumerator.MoveNext();
enumerator.Current.TryGetInt(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnumerateThroughArrayOfObjects" Id="{2886eaec-1da5-48b5-a911-c8214da6f67d}">
      <Declaration><![CDATA[METHOD PRIVATE TestEnumerateThroughArrayOfObjects
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '[{"name":"hello"}, {"name":"world"}, {"name":"foobar"}]';
	out1, out2, out3 : STRING;
	expected1 : STRING := 'hello';
	expected2 : STRING := 'world';
	expected3 : STRING := 'foobar';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestEnumerateThroughArrayOfObjects');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

enumerator.MoveNext();
enumerator.Current.TryGetKeyString('name', out1);

enumerator.MoveNext();
enumerator.Current.TryGetKeyString('name', out2);

enumerator.MoveNext();
enumerator.Current.TryGetKeyString('name', out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnumerateThroughArrayOfStrings" Id="{df70132e-4bbc-4053-b724-3cc19d4965ce}">
      <Declaration><![CDATA[METHOD PRIVATE TestEnumerateThroughArrayOfStrings
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '["one", "two", "three"]';
	out1, out2, out3 : STRING;
	expected1 : STRING := 'one';
	expected2 : STRING := 'two';
	expected3 : STRING := 'three';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestEnumerateThroughArrayOfStrings');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

enumerator.MoveNext();
enumerator.Current.TryGetString(out1);

enumerator.MoveNext();
enumerator.Current.TryGetString(out2);

enumerator.MoveNext();
enumerator.Current.TryGetString(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsNotValidAfterParentDispose" Id="{fa1ba373-1752-4710-8150-a6802a2999f6}">
      <Declaration><![CDATA[METHOD PRIVATE TestIsNotValidAfterParentDispose
VAR
	pJsonDeserializer : POINTER TO JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsNotValidAfterParentDispose');

pJsonDeserializer := __NEW(JsonDeserializer);
enumerator := pJsonDeserializer^.GetArrayElementEnumerator();

pJsonDeserializer^.Dispose();
result := enumerator.IsValid;

enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'IsValid incorrectly returned true after parent was distroyed'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsNotValidAfterParentReset" Id="{c294782e-ba5e-4f6b-a336-0bf3742baae1}">
      <Declaration><![CDATA[METHOD PRIVATE TestIsNotValidAfterParentReset
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsNotValidAfterParentReset');

enumerator := jsonDeserializer.GetArrayElementEnumerator();

jsonDeserializer.Reset();
result := enumerator.IsValid;

enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'IsValid incorrectly returned true after parent was reset'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsValidAtStart" Id="{7b958034-0a5a-4629-8293-c659d3c60c8f}">
      <Declaration><![CDATA[METHOD PRIVATE TestIsValidAtStart
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsValidAtStart');

enumerator := jsonDeserializer.GetArrayElementEnumerator();

result := enumerator.IsValid;
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'IsValid returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsFalseAtTheEnd" Id="{ec6721a4-94f0-4e1e-ae96-010610a617f1}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsFalseAtTheEnd
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '[100]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseAtTheEnd');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();

enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal the end of the enumeration');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsFalseWhenEmpty" Id="{0552cc37-67b1-4236-bb02-f7dc3dda10b6}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsFalseWhenEmpty
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '[]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

result := enumerator.MoveNext();

enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal an empty array');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsTrueMultipleItems" Id="{e34ff359-ae9f-4834-9937-9fae9773d92d}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsTrueMultipleItems
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '[true, false, true]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueMultipleItems');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();

enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'MoveNext did not correctly signal there were more items to follow'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsTrueSingleItem" Id="{ea282da7-383c-4be0-9b5a-86910980de3a}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsTrueSingleItem
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerForwardEnumerator;
    json : STRING := '[100]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueSingleItem');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayElementEnumerator();

result := enumerator.MoveNext();

enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'MoveNext did not correctly signal there were more items to follow, i.e. the first item'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>