<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDomParser_TestSuite" Id="{04424176-653a-49ad-adf2-0c9b2705b8ed}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK JsonDomParser_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
	jsonParser : JsonDomParser;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ModifyBoolArrayMemberFromJsonString();
ModifyDIntArrayMemberFromJsonString();
ModifyDIntPropertyFromJsonString();
ModifyFalseBoolPropertyFromJsonString();
ModifyIntArrayMemberFromJsonString();
ModifyIntPropertyFromJsonString();
ModifyLRealArrayMemberFromJsonString();
ModifyLRealPropertyFromJsonString();
ModifyRealArrayMemberFromJsonString();
ModifyRealPropertyFromJsonString();
ModifyStringPropertyFromJsonString();
ModifyTrueBoolPropertyFromJsonString();
ModifyUDIntArrayMemberFromJsonString();
ModifyUDIntPropertyFromJsonString();
ModifyValueFromChainedProperty();
ReadBoolArrayMemberFromJsonString();
ReadDIntArrayMemberFromJsonString();
ReadDIntPropertyFromJsonString();
ReadFalseBoolPropertyFromJsonString();
ReadIntArrayMemberFromJsonString();
ReadIntPropertyFromJsonString();
ReadLRealArrayMemberFromJsonString();
ReadLRealPropertyFromJsonString();
ReadRealArrayMemberFromJsonString();
ReadRealPropertyFromJsonString();
ReadStringPropertyFromJsonString();
ReadTrueBoolPropertyFromJsonString();
ReadUDIntArrayMemberFromJsonString();
ReadUDIntPropertyFromJsonString();
ReadValueFromChainedProperties();
TestTryLocateMethod();
TestTryWriteBoolMethod();
TestTryWriteDintMethod();
TestTryWriteIntMethod();
TestTryWriteLRealMethod();
TestTryWriteRealMethod();
TestTryWriteStringMethod();
TestTryWriteUdintMethod();]]></ST>
    </Implementation>
    <Method Name="ModifyBoolArrayMemberFromJsonString" Id="{ea3d6e63-a114-47ac-8ed8-933bb714da06}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyBoolArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [false, false, false]}';
	newValue : BOOL := TRUE;
	modifyResult : BOOL;
	result : BOOL;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyBoolArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myArray[1]',newValue);
readResult := jsonParser.TryRead('.myArray[1]',result);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := result, Message := 'Did not modify to the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyDIntArrayMemberFromJsonString" Id="{4644a57b-1e4d-4ebd-b6fe-f02149f06ba2}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyDIntArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123,456,789]}';
	newValue : DINT := 654;
	modifyResult : BOOL;
	actual : DINT;
	expected : DINT := 654;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyDIntArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myArray[1]',newValue);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyDIntPropertyFromJsonString" Id="{87860ab8-c64f-46b6-8267-971527c4d130}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyDIntPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myDInt" : 123}';
	newValue : DINT := 456;
	modifyResult : BOOL;
	actual : DINT;
	expected : DINT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyDIntPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myDInt',newValue);
readResult := jsonParser.TryRead('.myDInt',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyFalseBoolPropertyFromJsonString" Id="{9209b5b3-01fb-4801-ac18-cbafc9ee198e}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyFalseBoolPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myTrueBool" : true, "myFalseBool" : false}';
	newValue : BOOL := TRUE;
	modifyResult : BOOL;
	result : BOOL;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyFalseBoolPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myFalseBool',newValue);
readResult := jsonParser.TryRead('.myFalseBool',result);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := result, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyIntArrayMemberFromJsonString" Id="{e9dffa10-f70a-4a98-a80b-9fed18b263e1}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyIntArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123,456,789]}';
	newValue : INT := 654;
	modifyResult : BOOL;
	actual : INT;
	expected : INT := 654;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyIntArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myArray[1]',newValue);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyIntPropertyFromJsonString" Id="{e7db5f86-945a-4a7e-bda3-3a1eb01906b2}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyIntPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myInt" : 123}';
	newValue : INT := 456;
	modifyResult : BOOL;
	actual : INT;
	expected : INT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyIntPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myInt',newValue);
readResult := jsonParser.TryRead('.myInt',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyLRealArrayMemberFromJsonString" Id="{d9d168c4-78e0-4cc5-9aaf-03d9c4b3336e}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyLRealArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123.1,456.2,789.3]}';
	newValue : LREAL := 678.4;
	modifyResult : BOOL;
	actual : LREAL;
	expected : LREAL := 678.4;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyLRealArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myArray[1]',newValue);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyLRealPropertyFromJsonString" Id="{57a7facb-d1b9-4cca-9070-527252862e20}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyLRealPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myLReal" : 123.4}';
	newValue : LREAL := 456.5;
	modifyResult : BOOL;
	actual : LREAL;
	expected : LREAL := 456.5;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyLRealPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myLReal',newValue);
readResult := jsonParser.TryRead('.myLReal',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyRealArrayMemberFromJsonString" Id="{28964a0c-4ab4-4baa-b4a3-d317d5994231}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyRealArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123.1,456.2,789.3]}';
	newValue : REAL := 678.4;
	modifyResult : BOOL;
	actual : REAL;
	expected : REAL := 678.4;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyRealArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myArray[1]',newValue);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyRealPropertyFromJsonString" Id="{71df7d9e-9a59-4a3b-83f0-2c45e6d7199b}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyRealPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myReal" : 123.4}';
	newValue : REAL := 456.5;
	modifyResult : BOOL;
	actual : REAL;
	expected : REAL := 456.5;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyRealPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myReal',newValue);
readResult := jsonParser.TryRead('.myReal',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyStringPropertyFromJsonString" Id="{b7f769be-5229-4a70-8f4f-577bf2a2df37}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyStringPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myString" : "test"}';
	newValue : T_MAXSTRING := 'foobar';
	modifyResult : BOOL;
	actual : T_MAXSTRING;
	expected : T_MAXSTRING := 'foobar';
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyStringPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myString',newValue);
readResult := jsonParser.TryRead('.myString',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyTrueBoolPropertyFromJsonString" Id="{bb1f42f9-5b7c-4258-9b42-77c63ba516c5}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyTrueBoolPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myTrueBool" : true, "myFalseBool" : false}';
	newValue : BOOL := FALSE;
	modifyResult : BOOL;
	result : BOOL;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyTrueBoolPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myTrueBool', newValue);
readResult := jsonParser.TryRead('.myTrueBool', result);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := (result = newValue), Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyUDIntArrayMemberFromJsonString" Id="{4921f0ec-f7ce-488c-bf84-e4906702e30f}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyUDIntArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123,456,789]}';
	newValue : UINT := 654;
	modifyResult : BOOL;
	actual : UINT;
	expected : UINT := 654;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyUDIntArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myArray[1]',newValue);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyUDIntPropertyFromJsonString" Id="{d750b1d9-54d2-42c9-85a2-ca3a020339b4}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyUDIntPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myUDInt" : 123}';
	newValue : UDINT := 456;
	modifyResult : BOOL;
	actual : UDINT;
	expected : UDINT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyUDIntPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.myUDInt',newValue);
readResult := jsonParser.TryRead('.myUDInt',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModifyValueFromChainedProperty" Id="{edc06e47-ec07-4beb-bd50-3aeb3e846da2}">
      <Declaration><![CDATA[METHOD PUBLIC ModifyValueFromChainedProperty
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"level1" : {"level2" : {"level3" : {"level4" : 123}}}}';
	newValue : DINT := 456;
	modifyResult : BOOL;
	actual : DINT;
	expected : DINT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ModifyValueFromChainedProperty');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
modifyResult := jsonParser.TryModify('.level1.level2.level3.level4',newValue);
readResult := jsonParser.TryRead('.level1.level2.level3.level4',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not modify to the correct value');
AssertTrue(Condition := modifyResult, Message := 'Did not report a modify was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadBoolArrayMemberFromJsonString" Id="{03ef375a-e98e-0372-0f9d-1b689aebffa7}">
      <Declaration><![CDATA[METHOD PUBLIC ReadBoolArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [false, true, false]}';
	result : BOOL;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadBoolArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myArray[1]',result);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := result, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadDIntArrayMemberFromJsonString" Id="{004b6cc7-9d17-0d98-2760-1ad6a517bcb8}">
      <Declaration><![CDATA[METHOD PUBLIC ReadDIntArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123,456,789]}';
	actual : DINT;
	expected : DINT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadDIntArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myArray[1]',Actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadDIntPropertyFromJsonString" Id="{ef862b32-3de6-4123-b06f-eaf63d40148b}">
      <Declaration><![CDATA[METHOD PUBLIC ReadDIntPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myDInt" : 123}';
	actual : DINT;
	expected : DINT := 123;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadDIntPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myDInt',Actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadFalseBoolPropertyFromJsonString" Id="{20f1d02c-153b-0532-1589-59c2edd5b146}">
      <Declaration><![CDATA[METHOD PUBLIC ReadFalseBoolPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myTrueBool" : true, "myFalseBool" : false}';
	result : BOOL;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadFalseBoolPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myFalseBool',result);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertFalse(Condition := result, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadIntArrayMemberFromJsonString" Id="{09d25eab-5de1-07ca-37ab-fabdbada5068}">
      <Declaration><![CDATA[METHOD PUBLIC ReadIntArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123,456,789]}';
	actual : INT;
	expected : INT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadIntArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadIntPropertyFromJsonString" Id="{8bfc6c12-3d1b-4c83-891e-dd6a08fedb33}">
      <Declaration><![CDATA[METHOD PUBLIC ReadIntPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myInt" : 123}';
	actual : INT;
	expected : INT := 123;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadIntPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myInt',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadLRealArrayMemberFromJsonString" Id="{bfb2db06-4f69-0757-2b87-7080d4b48fd8}">
      <Declaration><![CDATA[METHOD PUBLIC ReadLRealArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [-123.1,-456.2]}';
	actual : LREAL;
	expected : LREAL := -456.2;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadLRealArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadLRealPropertyFromJsonString" Id="{d8133b9f-fcd2-490f-8c01-91418b9b23f5}">
      <Declaration><![CDATA[METHOD PUBLIC ReadLRealPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myLReal" : -123.1}';
	actual : LREAL;
	expected : LREAL := -123.1;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadLRealPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myLReal',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRealArrayMemberFromJsonString" Id="{ef0b1797-04a9-04ac-3a49-2c7386f99b65}">
      <Declaration><![CDATA[METHOD PUBLIC ReadRealArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123.1,456.2,789.3]}';
	actual : REAL;
	expected : REAL := 456.2;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadRealArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRealPropertyFromJsonString" Id="{c94634bc-9e1f-4ae5-ac8b-e9b816d73595}">
      <Declaration><![CDATA[METHOD PUBLIC ReadRealPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myReal" : 123.1}';
	actual : REAL;
	expected : REAL := 123.1;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadRealPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myReal',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadStringPropertyFromJsonString" Id="{692da5c1-cb3e-4010-8a82-90cfc54afac4}">
      <Declaration><![CDATA[METHOD PUBLIC ReadStringPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myString" : "test"}';
	actual : T_MAXSTRING;
	expected : T_MAXSTRING := 'test';
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadStringPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myString',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadTrueBoolPropertyFromJsonString" Id="{946cfb3a-f7c9-4db6-b45e-2637ca053545}">
      <Declaration><![CDATA[METHOD PUBLIC ReadTrueBoolPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myTrueBool" : true, "myFalseBool" : false}';
	result : BOOL;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadTrueBoolPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myTrueBool',result);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := result, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadUDIntArrayMemberFromJsonString" Id="{c1a2b68f-1a07-056c-2b9e-c03a4c8f19c2}">
      <Declaration><![CDATA[METHOD PUBLIC ReadUDIntArrayMemberFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myArray" : [123,456,789]}';
	actual : UDINT;
	expected : UDINT := 456;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadUDIntArrayMemberFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myArray[1]',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadUDIntPropertyFromJsonString" Id="{799b7e0e-6ce9-4326-ae4e-eafbcfd38fca}">
      <Declaration><![CDATA[METHOD PUBLIC ReadUDIntPropertyFromJsonString
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"myUDInt" : 123}';
	actual : UDINT;
	expected : UDINT := 123;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadUDIntPropertyFromJsonString');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.myUDInt',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadValueFromChainedProperties" Id="{1a348435-203b-04d2-2833-1cf17f931f93}">
      <Declaration><![CDATA[METHOD PUBLIC ReadValueFromChainedProperties
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"level1" : {"level2" : {"level3" : {"level4" : 123}}}}';
	actual : DINT;
	expected : DINT := 123;
	readResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ReadValueFromChainedProperties');

// @TEST-RUN
jsonParser.ParseDocument(jsonTestString);
readResult := jsonParser.TryRead('.level1.level2.level3.level4',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := expected, Actual := actual, Message := 'Did not read the correct value');
AssertTrue(Condition := readResult, Message := 'Did not report a read was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryLocateMethod" Id="{0a20117d-20ff-4a6a-9095-e564d64d82cc}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryLocateMethod
VAR_INPUT
END_VAR
VAR
	jsonTestString : T_MAXSTRING := '{"level1" : {"level2" : "test"}}';
	root : SJsonValue;
	level1 : SJsonValue;
	level2 : SJsonValue;
	actual : SJsonValue;
	locateResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryLocateMethod');

// @TEST-RUN
root := jsonParser.ParseDocument(jsonTestString);

// manually obtain the correct result
level1 := jsonParser.FindMember(root,'level1');
level2 := jsonParser.FindMember(level1,'level2');

locateResult := jsonParser.TryLocate('.level1.level2',actual);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertEquals(Expected := level2, Actual := actual, Message := 'Did not locate the correct member');
AssertTrue(Condition := locateResult, Message := 'Did not report a locate was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteBoolMethod" Id="{c3669bbc-e5ed-4e00-b676-fbdc2a92b22c}">
      <Declaration><![CDATA[METHOD TestTryWriteBoolMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newBool : BOOL := TRUE;  // Example BOOL value
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readBool1 : BOOL;
    readBool2 : BOOL;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myBoolValue":true},null,true]}';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteBOOLMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myBoolValue', newBool);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newBool);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myBoolValue', readBool1);
readResult2 := jsonParser.TryRead('.myThing[4]', readBool2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful for BOOL');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful for BOOL');
AssertTrue(Condition := readResult1 AND (readBool1 = newBool), Message := 'Could not read back the first written BOOL value or value mismatched');
AssertTrue(Condition := readResult2 AND (readBool2 = newBool), Message := 'Could not read back the second written BOOL value or value mismatched');
AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected for BOOL');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteDintMethod" Id="{5049ee7b-b01c-4c82-a9e1-f63094f874d4}">
      <Declaration><![CDATA[METHOD TestTryWriteDintMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newDInt : DINT := -12345678;  // Example DINT value (can be negative)
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readDInt1 : DINT;
    readDInt2 : DINT;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myDIntValue":-12345678},null,-12345678]}';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteDINTMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myDIntValue', newDInt);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newDInt);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myDIntValue', readDInt1);
readResult2 := jsonParser.TryRead('.myThing[4]', readDInt2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful for DINT');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful for DINT');
AssertTrue(Condition := readResult1 AND (readDInt1 = newDInt), Message := 'Could not read back the first written DINT value or value mismatched');
AssertTrue(Condition := readResult2 AND (readDInt2 = newDInt), Message := 'Could not read back the second written DINT value or value mismatched');
AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected for DINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteIntMethod" Id="{d1097002-d164-46fe-8925-c1f94d9a5ac6}">
      <Declaration><![CDATA[METHOD TestTryWriteIntMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newInt : INT := 789;
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readInt1 : INT;
    readInt2 : INT;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myIntValue":789},null,789]}';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteIntMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myIntValue', newInt);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newInt);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myIntValue', readInt1);
readResult2 := jsonParser.TryRead('.myThing[4]', readInt2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful');
AssertTrue(Condition := readResult1 AND (readInt1 = newInt), Message := 'Could not read back the first written INT value or value mismatched');
AssertTrue(Condition := readResult2 AND (readInt2 = newInt), Message := 'Could not read back the second written INT value or value mismatched');
AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteLRealMethod" Id="{f5a5e22b-7206-4758-a059-f1bf99526be2}">
      <Declaration><![CDATA[METHOD TestTryWriteLRealMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newLReal : LREAL := 12345.6789;  // Example LREAL value
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readLReal1 : LREAL;
    readLReal2 : LREAL;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myLRealValue":12345.6789},null,12345.6789]}';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteLREALMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myLRealValue', newLReal);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newLReal);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myLRealValue', readLReal1);
readResult2 := jsonParser.TryRead('.myThing[4]', readLReal2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful for LREAL');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful for LREAL');
AssertTrue(Condition := readResult1 AND ABS(readLReal1 - newLReal) < 1e-6, Message := 'Could not read back the first written LREAL value or value mismatched');  // using a tolerance for floating-point comparison
AssertTrue(Condition := readResult2 AND ABS(readLReal2 - newLReal) < 1e-6, Message := 'Could not read back the second written LREAL value or value mismatched');  // using a tolerance for floating-point comparison
AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected for LREAL');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteRealMethod" Id="{66ca1ed0-fa04-4f4c-9630-3c237b14136d}">
      <Declaration><![CDATA[METHOD TestTryWriteRealMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newReal : REAL := 123.456;  // Example REAL value
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readReal1 : REAL;
    readReal2 : REAL;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myRealValue":123.456},null,123.456]}';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteREALMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myRealValue', newReal);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newReal);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myRealValue', readReal1);
readResult2 := jsonParser.TryRead('.myThing[4]', readReal2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful for REAL');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful for REAL');
AssertTrue(Condition := readResult1 AND ABS(readReal1 - newReal) < 1e-5, Message := 'Could not read back the first written REAL value or value mismatched');  // using a tolerance for floating-point comparison
AssertTrue(Condition := readResult2 AND ABS(readReal2 - newReal) < 1e-5, Message := 'Could not read back the second written REAL value or value mismatched');  // using a tolerance for floating-point comparison
//AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected for REAL');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteStringMethod" Id="{e95032bc-92aa-4f72-aeb1-f9eb5e0e063f}">
      <Declaration><![CDATA[METHOD TestTryWriteStringMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newString : STRING := 'HelloWorld';  // Example STRING value
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readString1 : STRING;
    readString2 : STRING;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myStringValue":"HelloWorld"},null,"HelloWorld"]}';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteSTRINGMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myStringValue', newString);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newString);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myStringValue', readString1);
readResult2 := jsonParser.TryRead('.myThing[4]', readString2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful for STRING');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful for STRING');
AssertTrue(Condition := readResult1 AND (readString1 = newString), Message := 'Could not read back the first written STRING value or value mismatched');
AssertTrue(Condition := readResult2 AND (readString2 = newString), Message := 'Could not read back the second written STRING value or value mismatched');
AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected for STRING');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryWriteUdintMethod" Id="{6b57720a-3f78-4387-a7c4-8427d7d238e8}">
      <Declaration><![CDATA[METHOD TestTryWriteUdintMethod
VAR
    jsonParser : JsonDomParser;
    jsonInitialString : T_MAXSTRING := '{"foo":"bar"}';
    newUDInt : UDINT := 1234567890;  // Assuming UDINT has a suitable range
    writeSuccess1 : BOOL;
    writeSuccess2 : BOOL;
    readUDInt1 : UDINT;
    readUDInt2 : UDINT;
    readResult1 : BOOL;
    readResult2 : BOOL;
    jsonOutput : T_MAXSTRING;
    expectedJsonOutput : T_MAXSTRING := '{"foo":"bar","myThing":[null,null,{"myUDIntValue":1234567890},null,1234567890]}';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryWriteUDINTMethod');

// @TEST-RUN
jsonParser.ParseDocument(jsonInitialString);
writeSuccess1 := jsonParser.TryWrite('.myThing[2].myUDIntValue', newUDInt);
writeSuccess2 := jsonParser.TryWrite('.myThing[4]', newUDInt);
jsonOutput := jsonParser.GetDocument();

readResult1 := jsonParser.TryRead('.myThing[2].myUDIntValue', readUDInt1);
readResult2 := jsonParser.TryRead('.myThing[4]', readUDInt2);
jsonParser.NewDocument();

// @TEST-ASSERT
AssertTrue(Condition := writeSuccess1, Message := 'First TryWrite operation was unsuccessful for UDINT');
AssertTrue(Condition := writeSuccess2, Message := 'Second TryWrite operation was unsuccessful for UDINT');
AssertTrue(Condition := readResult1 AND (readUDInt1 = newUDInt), Message := 'Could not read back the first written UDINT value or value mismatched');
AssertTrue(Condition := readResult2 AND (readUDInt2 = newUDInt), Message := 'Could not read back the second written UDINT value or value mismatched');
AssertEquals(Expected := expectedJsonOutput, Actual := jsonOutput, Message := 'Output JSON does not match expected for UDINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>